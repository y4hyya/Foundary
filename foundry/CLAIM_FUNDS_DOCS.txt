# claim_funds() Function - Complete Documentation

## Overview

The `claim_funds()` function allows project owners to withdraw all accumulated SUI tokens from their crowdfunding project after the funding goal has been successfully met. This is a critical function in the crowdfunding lifecycle, enabling founders to access the funds they raised.

---

## Function Signature

```move
public fun claim_funds(
    project: &mut Project,
    ctx: &mut TxContext
)
```

### Parameters

1. **project: &mut Project**
   - Mutable reference to the Project object
   - Must be owned by the caller
   - Will be modified (is_withdrawn flag set to true)

2. **ctx: &mut TxContext**
   - Transaction context
   - Used to get caller's address
   - Used to create the Coin object

### Returns

- **Nothing directly**, but transfers a `Coin<SUI>` to the owner's wallet
- The owner receives the entire project balance as a transferable coin

---

## Implementation Details

### Security Checks (in order)

1. **Ownership Verification**
   ```move
   assert!(caller == project.owner, ENotProjectOwner);
   ```
   - Ensures only the project owner can claim funds
   - Error code: 3 (ENotProjectOwner)

2. **Funding Goal Verification**
   ```move
   assert!(project.current_funding >= project.funding_goal, EFundingGoalNotMet);
   ```
   - Ensures the funding goal has been met or exceeded
   - Error code: 4 (EFundingGoalNotMet)

3. **Withdrawal Status Check**
   ```move
   assert!(!project.is_withdrawn, EProjectAlreadyFunded);
   ```
   - Prevents double withdrawal
   - Error code: 5 (EProjectAlreadyFunded)

### Process Flow

```
1. Get caller's address (tx_context::sender)
   ↓
2. Verify caller == project.owner
   ↓
3. Verify current_funding >= funding_goal
   ↓
4. Verify !is_withdrawn
   ↓
5. Get total balance amount
   ↓
6. Withdraw all balance from project
   ↓
7. Convert Balance<SUI> to Coin<SUI>
   ↓
8. Set is_withdrawn = true
   ↓
9. Emit FundsWithdrawn event
   ↓
10. Transfer coin to owner
```

### Key Operations

```move
// Get balance amount
let total_balance = balance::value(&project.balance);

// Extract all balance
let withdrawn_balance = balance::withdraw_all(&mut project.balance);

// Convert to coin for transfer
let payment_coin = coin::from_balance(withdrawn_balance, ctx);

// Mark as withdrawn
project.is_withdrawn = true;

// Emit event
event::emit(FundsWithdrawn {
    project_id: object::uid_to_address(&project.id),
    owner: caller,
    amount: total_balance,
});

// Transfer to owner
transfer::public_transfer(payment_coin, caller);
```

---

## Error Conditions

### ENotProjectOwner (Error Code: 3)
**When:** Caller is not the project owner
**Example:**
```move
// Non-owner tries to claim
claim_funds(&mut project, ctx); // ❌ Aborts with code 3
```

### EFundingGoalNotMet (Error Code: 4)
**When:** Project hasn't reached its funding goal
**Example:**
```move
// Goal: 10 SUI, Current: 5 SUI
claim_funds(&mut project, ctx); // ❌ Aborts with code 4
```

### EProjectAlreadyFunded (Error Code: 5)
**When:** Funds have already been withdrawn
**Example:**
```move
claim_funds(&mut project, ctx); // ✅ First claim succeeds
claim_funds(&mut project, ctx); // ❌ Second claim aborts with code 5
```

---

## Usage Examples

### Example 1: Successful Claim

```move
// Project created with 10 SUI goal
let project = create_project(
    string::utf8(b"My Project"),
    10_000_000_000, // 10 SUI
    deadline,
    ctx
);

// Backers contribute 12 SUI total (overfunded)
fund_project(&mut project, coin::mint(5_000_000_000, ctx), ctx);
fund_project(&mut project, coin::mint(7_000_000_000, ctx), ctx);

// Owner claims all 12 SUI
claim_funds(&mut project, ctx); // ✅ Succeeds
// Owner receives 12 SUI in their wallet
```

### Example 2: Claim at Exact Goal

```move
// Project with 5 SUI goal
let project = create_project(..., 5_000_000_000, ...);

// Backer contributes exactly 5 SUI
fund_project(&mut project, coin::mint(5_000_000_000, ctx), ctx);

// Owner claims exactly 5 SUI
claim_funds(&mut project, ctx); // ✅ Succeeds
```

### Example 3: Failed Claim - Goal Not Met

```move
// Project with 10 SUI goal
let project = create_project(..., 10_000_000_000, ...);

// Only 3 SUI contributed
fund_project(&mut project, coin::mint(3_000_000_000, ctx), ctx);

// Owner tries to claim
claim_funds(&mut project, ctx); // ❌ Aborts with EFundingGoalNotMet
```

### Example 4: Failed Claim - Not Owner

```move
// Owner creates project
tx::next_tx(&mut scenario, OWNER);
let project = create_project(...);

// Non-owner tries to claim
tx::next_tx(&mut scenario, ATTACKER);
claim_funds(&mut project, ctx); // ❌ Aborts with ENotProjectOwner
```

---

## State Changes

### Project Object Changes
- **balance**: Emptied (withdrawn to 0)
- **is_withdrawn**: Set to `true`
- **current_funding**: Unchanged (remains as total funded amount)
- **All other fields**: Unchanged

### Objects Created
- **Coin<SUI>**: Created and transferred to owner

### Events Emitted
```move
FundsWithdrawn {
    project_id: address,      // Project's address
    owner: address,           // Owner who claimed
    amount: u64,             // Amount withdrawn in MIST
}
```

---

## Integration with Frontend

### TypeScript Example (Using @mysten/dapp-kit)

```typescript
import { Transaction } from '@mysten/sui/transactions';
import { useSignAndExecuteTransaction } from '@mysten/dapp-kit';

function ClaimFundsButton({ projectId }: { projectId: string }) {
  const { mutate: signAndExecute } = useSignAndExecuteTransaction();

  const handleClaim = () => {
    const tx = new Transaction();
    
    // Call claim_funds
    tx.moveCall({
      target: `${PACKAGE_ID}::foundry::claim_funds`,
      arguments: [
        tx.object(projectId), // Project object
      ],
    });

    signAndExecute({
      transaction: tx,
      options: {
        showEvents: true,
      },
    }, {
      onSuccess: (result) => {
        console.log('Funds claimed!', result);
        // Owner's wallet now has the SUI
      },
      onError: (error) => {
        console.error('Claim failed:', error);
      },
    });
  };

  return <button onClick={handleClaim}>Claim Funds</button>;
}
```

---

## Testing

### Test Coverage

All test cases implemented and passing:

1. **test_claim_funds_success** ✅
   - Owner successfully claims after goal is met
   - Verifies coin transfer to owner

2. **test_claim_funds_non_owner** ✅
   - Non-owner attempt is rejected
   - Aborts with ENotProjectOwner

3. **test_claim_funds_goal_not_met** ✅
   - Claim fails when funding goal not reached
   - Aborts with EFundingGoalNotMet

4. **test_claim_funds_double_withdrawal** ✅
   - Second claim attempt is rejected
   - Aborts with EProjectAlreadyFunded

5. **test_claim_funds_overfunded_project** ✅
   - Owner receives all funds (including overfunding)
   - 8 SUI received when goal was 5 SUI

6. **test_claim_funds_exactly_at_goal** ✅
   - Owner claims when exactly at goal
   - Works with current_funding == funding_goal

### Running Tests

```bash
cd foundry
sui move test

# Expected output:
# [ PASS    ] foundry::foundry_tests::test_claim_funds_success
# [ PASS    ] foundry::foundry_tests::test_claim_funds_non_owner
# [ PASS    ] foundry::foundry_tests::test_claim_funds_goal_not_met
# [ PASS    ] foundry::foundry_tests::test_claim_funds_double_withdrawal
# [ PASS    ] foundry::foundry_tests::test_claim_funds_overfunded_project
# [ PASS    ] foundry::foundry_tests::test_claim_funds_exactly_at_goal
# Test result: OK. Total tests: 16; passed: 16; failed: 0
```

---

## Security Considerations

### ✅ Implemented Protections

1. **Ownership Validation**
   - Only project.owner can claim
   - No delegate claiming allowed

2. **Goal Verification**
   - Must meet or exceed funding_goal
   - Prevents premature withdrawal

3. **Reentrancy Protection**
   - is_withdrawn flag prevents double claims
   - State updated before transfer

4. **Complete Withdrawal**
   - Withdraws entire balance
   - No partial withdrawals
   - Prevents accounting issues

5. **Event Emission**
   - All claims are logged
   - Enables off-chain tracking
   - Supports transparency

### ⚠️ Design Considerations

1. **No Deadline Check**
   - Can claim immediately after goal is met
   - Doesn't wait for deadline to pass
   - Consider if this is desired behavior

2. **No Partial Withdrawal**
   - Must claim all at once
   - Cannot withdraw in installments
   - Future: milestone-based withdrawals

3. **No Refund After Claim**
   - Once claimed, no refunds possible
   - is_withdrawn flag makes refunds impossible
   - Contributors should be aware

4. **Overfunding Goes to Owner**
   - Owner gets all funds, even above goal
   - Consider if excess should be handled differently
   - E.g., capped at goal with refunds

---

## Common Patterns

### Pattern 1: Check-Then-Claim

```move
// Off-chain check first
if (project.current_funding >= project.funding_goal && !project.is_withdrawn) {
    // Safe to call claim_funds
    claim_funds(&mut project, ctx);
}
```

### Pattern 2: Event-Driven UI

```typescript
// Listen for FundsWithdrawn events
suiClient.subscribeEvent({
  filter: {
    MoveEventType: `${PACKAGE_ID}::foundry::FundsWithdrawn`
  },
  onMessage: (event) => {
    console.log('Project funded:', event.parsedJson);
    // Update UI: show "Funded" badge
  }
});
```

### Pattern 3: Composite Transaction

```move
// Example: Claim and immediately use funds
let tx = new Transaction();

// 1. Claim funds from project
let coin = tx.moveCall({
  target: `${PACKAGE_ID}::foundry::claim_funds`,
  arguments: [tx.object(projectId)],
});

// 2. Immediately transfer to team wallet
tx.transferObjects([coin], tx.pure(teamWallet));
```

---

## Best Practices

### For Frontend Developers

1. **Check Eligibility Before Showing Button**
   ```typescript
   const canClaim = project.current_funding >= project.funding_goal &&
                    !project.is_withdrawn &&
                    userAddress === project.owner;
   ```

2. **Show Clear Feedback**
   ```typescript
   if (project.is_withdrawn) {
     return <Badge>Funds Claimed</Badge>;
   }
   ```

3. **Display Amount to be Claimed**
   ```typescript
   const claimableAmount = project.current_funding / 1_000_000_000; // Convert MIST to SUI
   return <div>Claimable: {claimableAmount} SUI</div>;
   ```

### For Smart Contract Developers

1. **Always Check All Conditions**
   - Ownership, goal, withdrawal status
   - Order matters for error clarity

2. **Update State Before Transfer**
   - Set is_withdrawn = true before transfer
   - Prevents reentrancy issues

3. **Emit Events**
   - Always emit FundsWithdrawn
   - Include all relevant data

---

## Comparison with Other Functions

| Feature | create_project | fund_project | claim_funds |
|---------|---------------|--------------|-------------|
| Caller | Anyone | Anyone | Owner only |
| Creates Object | Project | Contribution | Coin<SUI> |
| Requires Payment | No | Yes (Coin<SUI>) | No |
| Can Fail | Yes (goal=0) | Yes (amount=0) | Yes (3 checks) |
| Emits Event | ProjectCreated | ContributionMade | FundsWithdrawn |
| One-time Action | No | No (multiple) | Yes (once) |
| Modifies Project | No (creates) | Yes (balance) | Yes (withdrawn) |

---

## Future Enhancements

### Potential Improvements

1. **Milestone-Based Withdrawals**
   ```move
   // Withdraw X% at milestone Y
   public fun claim_milestone(
       project: &mut Project,
       milestone_id: u64,
       ctx: &mut TxContext
   )
   ```

2. **Deadline-Based Claims**
   ```move
   // Require deadline to pass before claiming
   assert!(clock::timestamp_ms(clock) > project.deadline, EDeadlineNotReached);
   ```

3. **Partial Withdrawals**
   ```move
   // Allow withdrawing specific amounts
   public fun claim_partial(
       project: &mut Project,
       amount: u64,
       ctx: &mut TxContext
   )
   ```

4. **Tax/Fee Deduction**
   ```move
   // Deduct platform fee
   let fee = (total_balance * PLATFORM_FEE_BPS) / 10000;
   let owner_amount = total_balance - fee;
   ```

5. **Multi-Signature Claims**
   ```move
   // Require multiple owners to approve
   public fun propose_claim(project: &mut Project, ctx: &mut TxContext);
   public fun approve_claim(project: &mut Project, ctx: &mut TxContext);
   ```

---

## Summary

### Function Purpose
Allows project owners to withdraw raised funds after successfully meeting their funding goal.

### Key Features
- ✅ Owner-only access
- ✅ Goal verification
- ✅ Double-withdrawal prevention
- ✅ Full balance withdrawal
- ✅ Event emission
- ✅ Comprehensive testing

### Typical Usage
1. Create project
2. Backers fund project
3. Goal is met
4. Owner calls claim_funds
5. Owner receives SUI in wallet

### Integration Ready
- Frontend integration examples provided
- Event subscription patterns documented
- Error handling guidelines included
- Comprehensive test coverage

---

## Quick Reference

```move
// Function signature
public fun claim_funds(project: &mut Project, ctx: &mut TxContext)

// Error codes
ENotProjectOwner = 3        // Caller is not owner
EFundingGoalNotMet = 4      // Goal not reached
EProjectAlreadyFunded = 5   // Already claimed

// Event emitted
FundsWithdrawn {
    project_id: address,
    owner: address,
    amount: u64,
}

// State changes
project.balance → 0 (empty)
project.is_withdrawn → true

// Object created
Coin<SUI> → transferred to owner
```

---

**Status:** ✅ Fully Implemented and Tested
**Version:** Prompt 11 Complete
**Tests:** 6/6 passing
**Module:** foundry::foundry
**Network:** Sui Testnet Ready

