# Feedback System Documentation

## Overview

The Feedback System enables direct communication between project contributors and project owners. Contributors can submit feedback messages about projects they've backed, with their Contribution objects serving as proof of backing. Feedback is delivered as on-chain objects with off-chain content stored via Walrus.

---

## Core Concept

### Communication Channel
- **Purpose**: Allow contributors to send structured feedback to project owners
- **Direction**: One-way (contributors â†’ owners)
- **Proof of Backing**: Contribution object required
- **Content Storage**: On-chain metadata + off-chain content (Walrus)
- **Delivery**: Feedback objects transferred to project owner's wallet

### Use Cases
1. **Progress Updates Requests**: Ask for project status updates
2. **Concerns & Issues**: Report problems or concerns
3. **Feature Suggestions**: Propose improvements
4. **Appreciation**: Thank owners for their work
5. **Questions**: Ask clarifying questions
6. **Constructive Criticism**: Provide improvement feedback

---

## Feedback Struct

### Structure Definition

```move
public struct Feedback has key, store {
    /// Unique identifier for the feedback
    id: UID,
    
    /// Reference to the Project this feedback is about
    project_id: ID,
    
    /// Address of the contributor who submitted the feedback
    backer_address: address,
    
    /// Walrus Content Identifier (CID) for the feedback message
    /// Stores reference to the actual feedback content (text, multimedia, etc.)
    message_cid: String,
}
```

### Fields

1. **id**: `UID`
   - Unique identifier for the feedback object
   - Generated when feedback is created
   - Used to track and reference the feedback

2. **project_id**: `ID`
   - Reference to the Project this feedback is about
   - Links feedback to specific project
   - Enables filtering by project

3. **backer_address**: `address`
   - Address of the contributor who submitted the feedback
   - Identifies the sender
   - Enables response/follow-up

4. **message_cid**: `String`
   - Walrus Content Identifier for the actual message
   - Points to off-chain content (JSON, text, multimedia)
   - Keeps on-chain data minimal

### Capabilities

- `has key`: Can be owned and transferred
- `has store`: Can be stored in collections
- Transferred to project owner upon creation

---

## submit_feedback Function

### Function Signature

```move
public fun submit_feedback(
    project: &Project,
    contribution: &Contribution,
    message_cid: String,
    ctx: &mut TxContext
)
```

### Parameters

1. **project**: `&Project`
   - Immutable reference to the Project to give feedback on
   - Used to verify contribution validity
   - Used to get owner address for transfer

2. **contribution**: `&Contribution`
   - Immutable reference to the contributor's Contribution object
   - Serves as proof of backing
   - Verifies contributor has funded the project
   - Remains with contributor (non-destructive)

3. **message_cid**: `String`
   - Walrus Content Identifier for the feedback message
   - Points to off-chain content storage
   - Can link to any content type (JSON, text, media)

4. **ctx**: `&mut TxContext`
   - Transaction context
   - Used to identify the caller
   - Used to create new UID

### Return Value

- **None** (creates and transfers Feedback object)
- Feedback object is transferred to project owner
- Owner receives it in their wallet

---

## Implementation Details

### Validation Checks

#### 1. Contribution Project Match
```move
let project_id = object::id(project);
assert!(contribution.project_id == project_id, EInvalidContribution);
```
- Verifies the Contribution is for this specific project
- Prevents feedback with unrelated Contributions
- Error: `EInvalidContribution` (code 9)

#### 2. Contribution Ownership
```move
assert!(contribution.backer_address == caller, EInvalidContribution);
```
- Verifies the caller owns the Contribution
- Prevents using someone else's Contribution
- Error: `EInvalidContribution` (code 9)

### Feedback Creation

#### 1. Create Feedback UID
```move
let feedback_uid = object::new(ctx);
let feedback_id = object::uid_to_address(&feedback_uid);
```
- Generates unique identifier for the feedback
- Converts UID to address for event emission

#### 2. Construct Feedback Object
```move
let feedback = Feedback {
    id: feedback_uid,
    project_id,
    backer_address: caller,
    message_cid,
};
```
- Creates Feedback with all required fields
- Captures contributor's address
- References project via ID

#### 3. Emit Event
```move
event::emit(FeedbackSubmitted {
    feedback_id,
    project_id: object::id_to_address(&project_id),
    backer: caller,
    message_cid,
});
```
- Emits event for off-chain indexing
- Includes all relevant information

#### 4. Transfer to Owner
```move
transfer::transfer(feedback, project.owner);
```
- Transfers Feedback object to project owner
- Owner can read, store, or process it
- Delivered to owner's wallet

---

## FeedbackSubmitted Event

### Structure
```move
public struct FeedbackSubmitted has copy, drop {
    feedback_id: address,
    project_id: address,
    backer: address,
    message_cid: String,
}
```

### Fields
- **feedback_id**: Unique identifier of the Feedback object
- **project_id**: Project the feedback is about
- **backer**: Address of the contributor who sent feedback
- **message_cid**: Walrus CID of the message content

### Use Cases
- Off-chain indexing for feedback dashboards
- Notification systems for owners
- Analytics on feedback frequency
- Audit trail for communication

---

## Error Handling

### Error Constant

| Code | Name | Description |
|------|------|-------------|
| 9 | EInvalidContribution | Contribution is not for this project or caller doesn't own it |

### Error Scenarios

1. **Wrong Project**
   - Contributor uses Contribution from different project
   - Error: `EInvalidContribution`
   - Prevention: Verify `contribution.project_id == project.id`

2. **Wrong Owner**
   - User tries to use someone else's Contribution
   - Error: `EInvalidContribution`
   - Prevention: Verify `contribution.backer_address == caller`

---

## Usage Examples

### Example 1: Basic Feedback Submission

```move
// Prerequisites:
// - Project created
// - User has funded the project (received Contribution)

// Submit feedback to project owner
submit_feedback(
    &project,
    &contribution,
    string::utf8(b"walrus_cid_feedback123"),
    ctx
);

// Owner receives Feedback object in their wallet
```

### Example 2: Multiple Feedbacks from Same Backer

```move
// Backer can submit multiple feedbacks over time
// First feedback
submit_feedback(&project, &contribution, string::utf8(b"cid_1"), ctx);

// Later, second feedback
submit_feedback(&project, &contribution, string::utf8(b"cid_2"), ctx);

// Owner receives both as separate Feedback objects
```

### Example 3: Multiple Backers Submitting Feedback

```move
// Backer 1 submits feedback
submit_feedback(&project, &contribution1, string::utf8(b"cid_a"), ctx1);

// Backer 2 submits feedback
submit_feedback(&project, &contribution2, string::utf8(b"cid_b"), ctx2);

// Backer 3 submits feedback
submit_feedback(&project, &contribution3, string::utf8(b"cid_c"), ctx3);

// Owner receives all three feedbacks
```

---

## Security Considerations

### 1. Contribution as Gatekeeper
- Only contributors with valid Contributions can send feedback
- Prevents spam from non-backers
- Ensures feedback comes from invested parties

### 2. Contribution Ownership Verification
- Caller must own the Contribution they present
- Prevents feedback submission with stolen/borrowed Contributions
- Maintains authenticity of feedback source

### 3. Project Binding
- Contribution must be for the specific project
- Prevents cross-project feedback manipulation
- Isolates communication per project

### 4. Non-Destructive Operation
- Contribution is not consumed when submitting feedback
- Contributors can submit multiple feedbacks
- Can also use same Contribution for voting

### 5. Direct Delivery
- Feedback goes directly to project owner
- No intermediary storage
- Owner has full control over their feedback

---

## Walrus Integration

### Message Content Structure

Recommended JSON structure for feedback content:

```json
{
  "version": "1.0",
  "type": "feedback",
  "timestamp": 1735689600000,
  "subject": "Progress Update Request",
  "message": "Could you provide an update on the development timeline?",
  "category": "question",
  "priority": "medium",
  "attachments": [
    {
      "type": "image",
      "url": "walrus://cid_attachment_123",
      "description": "Screenshot of issue"
    }
  ]
}
```

### Upload Process

```typescript
// Example: Upload feedback to Walrus
async function uploadFeedback(feedbackData: FeedbackContent): Promise<string> {
  const jsonBlob = new Blob([JSON.stringify(feedbackData)], {
    type: 'application/json',
  });
  
  const response = await fetch(`${WALRUS_PUBLISHER_URL}/v1/store`, {
    method: 'PUT',
    body: jsonBlob,
  });
  
  const result = await response.json();
  return result.newlyCreated?.blobObject?.blobId || result.alreadyCertified?.blobId;
}
```

---

## Frontend Integration

### Transaction Building

```typescript
// TypeScript/JavaScript example
import { Transaction } from '@mysten/sui/transactions';

const tx = new Transaction();

// Upload feedback content to Walrus first
const messageCid = await uploadFeedback({
  subject: "Great progress!",
  message: "Thank you for the update...",
  category: "appreciation",
});

// Submit feedback transaction
tx.moveCall({
  target: `${PACKAGE_ID}::foundry::submit_feedback`,
  arguments: [
    tx.object(projectId),           // Project reference
    tx.object(contributionId),       // Contribution object
    tx.pure.string(messageCid),     // Walrus CID
  ],
});

// Sign and execute
const result = await signAndExecuteTransaction({ transaction: tx });
```

### Event Listening

```typescript
// Listen for FeedbackSubmitted events
const events = await suiClient.queryEvents({
  query: {
    MoveEventType: `${PACKAGE_ID}::foundry::FeedbackSubmitted`,
  },
});

events.data.forEach((event) => {
  console.log(`Feedback submitted to project ${event.parsedJson.project_id}`);
  console.log(`From: ${event.parsedJson.backer}`);
  console.log(`Message CID: ${event.parsedJson.message_cid}`);
});
```

### UI Components

#### Feedback Form Component
```typescript
function FeedbackForm({ projectId, contributionId }: Props) {
  const [subject, setSubject] = useState('');
  const [message, setMessage] = useState('');
  const { mutate: submitFeedback } = useSignAndExecuteTransaction();
  
  const handleSubmit = async () => {
    // Upload to Walrus
    const messageCid = await uploadFeedback({
      subject,
      message,
      category: 'general',
      timestamp: Date.now(),
    });
    
    // Submit on-chain
    const tx = new Transaction();
    tx.moveCall({
      target: `${PACKAGE_ID}::foundry::submit_feedback`,
      arguments: [
        tx.object(projectId),
        tx.object(contributionId),
        tx.pure.string(messageCid),
      ],
    });
    
    await submitFeedback({ transaction: tx });
  };
  
  return (
    <form onSubmit={handleSubmit}>
      <input value={subject} onChange={(e) => setSubject(e.target.value)} />
      <textarea value={message} onChange={(e) => setMessage(e.target.value)} />
      <button type="submit">Send Feedback</button>
    </form>
  );
}
```

#### Owner Feedback Inbox
```typescript
function FeedbackInbox() {
  const { currentAccount } = useCurrentAccount();
  const { data: feedbacks } = useSuiClientQuery('getOwnedObjects', {
    owner: currentAccount!.address,
    filter: {
      StructType: `${PACKAGE_ID}::foundry::Feedback`,
    },
  });
  
  return (
    <div>
      <h2>Feedback Inbox</h2>
      {feedbacks?.data.map((feedback) => (
        <FeedbackCard key={feedback.data.objectId} feedback={feedback} />
      ))}
    </div>
  );
}
```

---

## Best Practices

### For Contributors

1. **Be Constructive**: Provide actionable feedback
2. **Be Specific**: Include details and examples
3. **Be Respectful**: Maintain professional tone
4. **Categorize**: Use consistent categories for filtering
5. **Follow Up**: Reference previous feedback when relevant

### For Project Owners

1. **Check Regularly**: Monitor feedback inbox
2. **Respond Promptly**: Acknowledge feedback
3. **Track Trends**: Look for common themes
4. **Take Action**: Address legitimate concerns
5. **Show Appreciation**: Thank contributors for input

### For Developers

1. **Validate Input**: Check Walrus CID format
2. **Handle Errors**: Provide clear error messages
3. **Index Events**: Build feedback dashboards
4. **Enable Search**: Allow filtering by category
5. **Rich Content**: Support various content types

---

## Testing

### Test Coverage

1. âœ… **test_submit_feedback_success**
   - Happy path: successful feedback submission
   - Verifies owner receives Feedback object

2. âœ… **test_submit_feedback_wrong_project**
   - Attempts to submit with Contribution from different project
   - Expects EInvalidContribution error

3. âœ… **test_submit_feedback_wrong_backer**
   - Attempts to use another backer's Contribution
   - Expects EInvalidContribution error

4. âœ… **test_submit_feedback_multiple_from_same_backer**
   - Same backer submits multiple feedbacks
   - Verifies no limit on feedback count

5. âœ… **test_submit_feedback_multiple_backers**
   - Multiple contributors submit feedback
   - Verifies all feedbacks are received

6. âœ… **test_submit_feedback_after_voting**
   - Contributor votes then submits feedback
   - Verifies Contribution can be used for both actions

---

## Comparison with Other Systems

### Feedback vs Voting

| Aspect | Feedback | Voting |
|--------|----------|--------|
| **Purpose** | Free-form communication | Structured decision-making |
| **Direction** | To owner | Recorded in poll |
| **Format** | Open-ended message | Fixed options |
| **Frequency** | Unlimited | One per poll |
| **Storage** | Owner's wallet | Project's polls table |
| **Content** | Off-chain (Walrus) | On-chain (options) |

### Feedback vs Jobs

| Aspect | Feedback | Jobs |
|--------|----------|------|
| **Creator** | Contributors | Project owner |
| **Purpose** | Communication | Opportunity posting |
| **Direction** | To owner | To public |
| **Requirement** | Contribution | Ownership |
| **Storage** | Owner's wallet | Project's jobs table |

---

## Future Enhancements

### Potential Features

1. **Response System**: Allow owners to respond to feedback
2. **Feedback Categories**: Add on-chain category field
3. **Priority Levels**: Mark urgent feedback
4. **Feedback Aggregation**: Collect related feedbacks
5. **Reputation System**: Track helpful feedback
6. **Batch Submissions**: Submit multiple feedbacks at once
7. **Feedback Templates**: Provide structured formats
8. **Read Receipts**: Track when owner views feedback
9. **Feedback Threading**: Group related feedbacks
10. **Anonymous Feedback**: Option for anonymous submissions

---

## Advanced Use Cases

### 1. Bug Reporting System
```typescript
const bugReport = {
  type: "bug",
  severity: "high",
  title: "Payment not processing",
  description: "...",
  steps: ["1. Click fund", "2. Confirm wallet", "3. Error appears"],
  environment: { browser: "Chrome", version: "120" },
};
```

### 2. Feature Requests
```typescript
const featureRequest = {
  type: "feature",
  title: "Add milestone tracking",
  description: "...",
  priority: "medium",
  votesCount: 5, // Off-chain tracking
};
```

### 3. Progress Check-ins
```typescript
const progressRequest = {
  type: "question",
  subject: "Development timeline update",
  lastUpdate: "2024-01-01",
  questionsNeeded: ["What's the current status?", "Any blockers?"],
};
```

---

## Summary

The Feedback System provides:
- âœ… **Contributor Voice**: Direct communication channel
- âœ… **Proof of Stake**: Contribution-based access
- âœ… **Rich Content**: Off-chain storage via Walrus
- âœ… **Direct Delivery**: To project owner's wallet
- âœ… **Non-Destructive**: Contribution remains with contributor
- âœ… **Unlimited**: No restrictions on feedback count
- âœ… **Flexible Format**: Any content type supported
- âœ… **Event Tracking**: Full audit trail

**Status**: Fully implemented and tested (46/46 tests passing)
**Security**: Production-ready with contribution verification
**Integration**: Frontend-ready with Walrus support
**Scalability**: Efficient on-chain + off-chain architecture

---

**Last Updated**: Prompt 16 completion
**Build**: Successful
**Tests**: 46/46 passing
**Documentation**: Complete

